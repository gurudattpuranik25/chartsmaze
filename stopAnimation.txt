// src/BarChartRace.js
import React, { useRef, useEffect } from 'react';
import * as d3 from 'd3';

const BarChartRace = ({ data }) => {
  const svgRef = useRef();
  const width = 800;
  const height = 600;
  const margin = { top: 20, right: 30, bottom: 40, left: 40 };

  useEffect(() => {
    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height);

    const x = d3.scaleLinear().range([margin.left, width - margin.right]);
    const y = d3.scaleBand().range([margin.top, height - margin.bottom]).padding(0.1);

    const updateChart = (data) => {
      // Sort data based on value
      data.sort((a, b) => b.value - a.value);

      // Update the scales
      x.domain([0, d3.max(data, d => d.value)]);
      y.domain(data.map(d => d.name));

      // Bind data to bars
      const bars = svg.selectAll('.bar')
        .data(data, d => d.name);

      // Exit old elements not present in new data
      bars.exit().remove();

      // Enter new elements
      const newBars = bars.enter().append('rect')
        .attr('class', 'bar')
        .attr('x', margin.left)
        .attr('height', y.bandwidth())
        .attr('y', d => y(d.name))
        .attr('width', 0)  // Start with width 0 for smooth transition
        .style('fill', 'steelblue');

      // Update existing elements and new elements together
      newBars.merge(bars)
        .transition()
        .duration(1000)
        .attr('y', d => y(d.name))
        .attr('width', d => x(d.value) - margin.left);

      // Bind data to labels
      const labels = svg.selectAll('.label')
        .data(data, d => d.name);

      // Exit old elements not present in new data
      labels.exit().remove();

      // Enter new elements
      const newLabels = labels.enter().append('text')
        .attr('class', 'label')
        .attr('x', margin.left)
        .attr('y', d => y(d.name) + y.bandwidth() / 2)
        .attr('dy', '0.35em')
        .style('fill', 'black');

      // Update existing elements and new elements together
      newLabels.merge(labels)
        .transition()
        .duration(1000)
        .attr('x', d => x(d.value) + 5)
        .attr('y', d => y(d.name) + y.bandwidth() / 2)
        .tween("text", function(d) {
          const i = d3.interpolate(this.textContent, d.value);
          return function(t) {
            this.textContent = Math.round(i(t));
          };
        });
    };

    const initialData = data[0];
    updateChart(initialData);

    // Animation loop
    let index = 0;
    const interval = setInterval(() => {
      index = (index + 1) % data.length;
      updateChart(data[index]);
    }, 2000);

    return () => clearInterval(interval);

  }, [data]);

  return <svg ref={svgRef}></svg>;
};

export default BarChartRace;
